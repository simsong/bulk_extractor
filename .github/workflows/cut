    - name: Extract Version from configure.ac
      id: extract_version
      run: |
        VERSION=$(grep 'AC_INIT' configure.ac | sed -n 's/.*AC_INIT.*\[\(.*\)\], \[\(.*\)\].*/\2/p')
        echo "Version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Conditional step for push events
      - name: Run on push
        if: github.event_name == 'push'
        run: echo "This runs on a push to any branch"

      # Conditional step for pull_request events
      - name: Run on pull request
        if: github.event_name == 'pull_request'
        run: echo "This runs on a pull request to the main branch"

      - name: "MacOS: run CONFIGURE_MACOS.bash"
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "" | bash etc/CONFIGURE_MACOS.bash

      - name: "Ubuntu: run CONFIGURE_UBUNTU22LTS.bash"
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "" | bash etc/CONFIGURE_UBUNTU22LTS.bash

      - name: Version Numbers
        run: |
          autoconf --version
          automake --version
          aclocal --version
          gcc --version
          g++ --version

      - name: Files
        run: |
          find . -print

      - name: Make configure script
        run: |
          bash bootstrap.sh

      - name: Dump configure script
        run: |
          cat configure

      - name: C++ checks not optimizaiton with address-sanitizer (Mac and Linux)
        run: |
          ./configure --disable-opt --enable-address-sanitizer
          make $MAKE_OPTS all
          pushd src
          make $MAKE_OPTS bulk_extractor
          make check || (cat test-suite.log; exit 1)
          popd
          make distclean

      - name: C++ checks optimization with address-sanitizer (Mac and Linux)
        run: |
          echo === Try Address Sanitizer Optimization ===
          ./configure --enable-address-sanitizer --enable-silent-rules --quiet
          make $MAKE_OPTS all
          pushd src
          make $MAKE_OPTS bulk_extractor
          make check || (cat test-suite.log; exit 1)
          popd
          make distclean

      - name: C++ checks with thread-sanitizer on ubuntu are disabled
        if: startsWith(matrix.os, 'ubuntu-DISABLED')
        run: |
          bash bootstrap.sh
          ./configure --enable-thread-sanitizer --enable-silent-rules  --quiet
          make clean
          make $MAKE_OPTS  all
          pushd src
          make $MAKE_OPTS  bulk_extractor
          make check || (cat test-suite.log; exit 1)
          popd
          make distclean

      - name: C++ checks with codecov
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          bash bootstrap.sh
          ./configure --disable-opt CFLAGS='-g -O0 -fprofile-arcs -ftest-coverage' CXXFLAGS='-g -O0 -fprofile-arcs -ftest-coverage' --enable-silent-rules --quiet
          make clean
          make $MAKE_OPTS  check || (echo ==error== ; cat test-suite.log; exit 1)

      - name: upload codecov report
        if: startsWith(matrix.os, 'ubuntu')
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          pushd src
          gcov-9 *.o *.cpp rar/*.cpp rar/*.hpp
          bash <(curl -s https://codecov.io/bash)
          popd

      - name: distcheck
        run: |
          bash bootstrap.sh
          ./configure -q
          make distcheck

      - name: Upload installer as artifact
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: bulk_extractor-${{ steps.ctx.outputs.version }}.tar.gz
          path: bulk_extractor-${{ steps.ctx.outputs.version }}.tar.gz


      - uses: ammaraskar/gcc-problem-matcher@0.2.0
        name: GCC Problem Matcher
